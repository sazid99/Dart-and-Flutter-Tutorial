এখানে **ক্লাস, অবজেক্ট এবং OOP** (Encapsulation, Inheritance, Polymorphism, Abstraction) কনসেপ্ট থেকে ৫০টি প্র্যাকটিস প্রবলেম দেওয়া হলো:  

---

### **ক্লাস এবং অবজেক্ট (10টি)**  
1. একটি `Car` ক্লাস তৈরি করো যেখানে `brand`, `model`, এবং `year` অ্যাট্রিবিউট থাকবে এবং সেগুলোর জন্য একটি কন্সট্রাক্টর তৈরি করো।  
2. `Person` ক্লাস তৈরি করো, যেখানে `name` এবং `age` থাকবে। একটি মেথড যোগ করো যা `name` এবং `age` প্রিন্ট করবে।  
3. `Rectangle` ক্লাস তৈরি করো যেখানে দৈর্ঘ্য ও প্রস্থ অ্যাট্রিবিউট থাকবে এবং একটি মেথড লিখে এর ক্ষেত্রফল বের করো।  
4. `BankAccount` ক্লাস তৈরি করো যেখানে ব্যালেন্স থাকবে। ডিপোজিট এবং উইথড্র করার মেথড যোগ করো।  
5. একটি `Student` ক্লাস তৈরি করো যেখানে `name`, `rollNumber`, এবং `grade` থাকবে। একটি মেথড যোগ করো যা এই ডেটা প্রিন্ট করবে।  
6. `Book` ক্লাস তৈরি করো যেখানে `title`, `author`, এবং `price` থাকবে। একটি মেথড লেখো যা বইয়ের বিবরণ রিটার্ন করবে।  
7. `Product` ক্লাস তৈরি করো যেখানে `id`, `name`, এবং `price` থাকবে। একটি ডিসকাউন্ট মেথড যোগ করো।  
8. `Circle` ক্লাস তৈরি করো যেখানে `radius` থাকবে। একটি মেথড যোগ করো যা এর ক্ষেত্রফল এবং পরিধি রিটার্ন করবে।  
9. `Employee` ক্লাস তৈরি করো যেখানে `id`, `name`, এবং `salary` থাকবে। একটি বোনাস ক্যালকুলেটরের মেথড যোগ করো।  
10. একটি `Movie` ক্লাস তৈরি করো যেখানে `name`, `director`, এবং `releaseYear` থাকবে। একটি মেথড যোগ করো যা মুভির বিবরণ দেখাবে।  

---

### **Encapsulation (10টি)**  
1. `Student` ক্লাস তৈরি করো যেখানে `rollNumber` এবং `grade` প্রাইভেট অ্যাট্রিবিউট থাকবে। সেগুলোর জন্য getter এবং setter যোগ করো।  
2. `BankAccount` ক্লাসে `balance` প্রাইভেট করো এবং getter ও setter ব্যবহার করে ব্যালেন্স ম্যানেজ করো।  
3. `Car` ক্লাস তৈরি করো এবং এর `speed` প্রাইভেট করো। মেথড যোগ করো যা গতি বাড়াতে বা কমাতে পারে।  
4. `Employee` ক্লাস তৈরি করো যেখানে প্রাইভেট `salary` থাকবে। সেটি আপডেট করার setter এবং রিটার্ন করার getter যোগ করো।  
5. একটি `Laptop` ক্লাস তৈরি করো যেখানে প্রাইভেট `price` থাকবে। ডিসকাউন্ট দেওয়ার জন্য একটি মেথড যোগ করো।  
6. `Account` ক্লাস তৈরি করো যেখানে প্রাইভেট `pin` থাকবে। ব্যবহারকারীকে ডিপোজিট বা উইথড্র করতে হলে সঠিক পিন প্রদান করতে হবে।  
7. `Book` ক্লাস তৈরি করো এবং এর প্রাইভেট `price` সেট ও রিট্রিভ করার মেথড যোগ করো।  
8. `Mobile` ক্লাস তৈরি করো যেখানে প্রাইভেট `batteryLevel` থাকবে। একটি মেথড দিয়ে ব্যাটারি লেভেল দেখাও।  
9. `Teacher` ক্লাস তৈরি করো যেখানে `id` প্রাইভেট থাকবে এবং getter ও setter দিয়ে এক্সেস করো।  
10. `Product` ক্লাসে প্রাইভেট `quantity` থাকবে। সেটি আপডেট ও রিট্রিভ করার জন্য মেথড যোগ করো।  

---

### **Inheritance (10টি)**  
1. একটি `Animal` ক্লাস তৈরি করো এবং সেটি থেকে `Dog` ও `Cat` ইনহেরিট করো।  
2. `Shape` ক্লাস তৈরি করো এবং সেটি থেকে `Rectangle` ও `Circle` ইনহেরিট করো। প্রত্যেকটির জন্য আলাদা ক্ষেত্রফল বের করো।  
3. `Vehicle` ক্লাস তৈরি করো এবং সেটি থেকে `Car` এবং `Bike` ইনহেরিট করো।  
4. `Person` ক্লাস তৈরি করো এবং সেটি থেকে `Student` এবং `Teacher` ইনহেরিট করো।  
5. `Account` ক্লাস থেকে `SavingsAccount` এবং `CurrentAccount` ইনহেরিট করো।  
6. `Employee` ক্লাস তৈরি করো এবং সেটি থেকে `Manager` এবং `Developer` ইনহেরিট করো।  
7. `Building` ক্লাস তৈরি করো এবং সেটি থেকে `House` এবং `Office` ইনহেরিট করো।  
8. `Computer` ক্লাস তৈরি করো এবং সেটি থেকে `Laptop` এবং `Desktop` ইনহেরিট করো।  
9. `Appliance` ক্লাস তৈরি করো এবং সেটি থেকে `WashingMachine` ও `Refrigerator` ইনহেরিট করো।  
10. `Bank` ক্লাস তৈরি করো এবং সেটি থেকে `OnlineBank` এবং `BranchBank` ইনহেরিট করো।  

---

### **Polymorphism (10টি)**  
1. `Animal` ক্লাস থেকে `Dog` এবং `Cat` ইনহেরিট করো এবং `makeSound()` মেথড ওভাররাইড করো।  
2. `Payment` ক্লাস থেকে `CreditCardPayment` এবং `PaypalPayment` ইনহেরিট করো এবং `processPayment()` মেথড ওভাররাইড করো।  
3. `Shape` ক্লাস থেকে `Circle` এবং `Square` ইনহেরিট করো এবং `draw()` মেথড ওভাররাইড করো।  
4. একটি `Calculator` ক্লাস তৈরি করো এবং `add()` মেথড ওভারলোড করো (দুই এবং তিনটি সংখ্যার জন্য)।  
5. `Vehicle` ক্লাস থেকে `Car` এবং `Bike` ইনহেরিট করো এবং `move()` মেথড ওভাররাইড করো।  
6. `Employee` ক্লাস থেকে `Manager` এবং `Developer` ইনহেরিট করো এবং `calculateSalary()` মেথড ওভাররাইড করো।  
7. `Shape` ক্লাসে `area()` মেথড তৈরি করো এবং `Rectangle` ও `Triangle` ক্লাসে ওভাররাইড করো।  
8. `MusicPlayer` ক্লাস তৈরি করো এবং সেটি থেকে `Spotify` ও `AppleMusic` ইনহেরিট করো। `playSong()` মেথড ওভাররাইড করো।  
9. `Appliance` ক্লাস তৈরি করো এবং সেটি থেকে `Fan` এবং `AC` ইনহেরিট করো। তাদের আলাদা `operate()` মেথড যোগ করো।  
10. `Vehicle` ক্লাসে `fuelEfficiency()` মেথড তৈরি করো এবং সেটি `ElectricCar` এবং `PetrolCar`-এ ওভাররাইড করো।  

---

### **Abstraction (10টি)**  
1. একটি অ্যাবস্ট্রাক্ট ক্লাস `Animal` তৈরি করো এবং `move()` মেথড অ্যাবস্ট্রাক্ট করে সেটি `Bird` এবং `Fish` ক্লাসে ওভাররাইড করো।  
2. `Shape` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং এর `getArea()` মেথড `Rectangle` ও `Circle` ক্লাসে ইমপ্লিমেন্ট করো।  
3. `Vehicle` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Car` ও `Bike` ইনহেরিট করো।  
4. একটি `Bank` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো যেখানে `getInterestRate()` মেথড থাকবে। সেটি `SavingsAccount` এবং `FixedDepositAccount` ক্লাসে ইমপ্লিমেন্ট করো।  
5. `Employee` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Manager` এবং `Clerk` ইনহেরিট করো।  
6. `Computer` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Desktop` এবং `Laptop` ইনহেরিট করো।  
7. একটি `Device` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Mobile` এবং `Tablet` ইনহেরিট করো।  
8. `Appliance` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Fan` এবং `Heater` ইনহেরিট করো।  
9. `Transport` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Bus` এবং `Train` ইনহেরিট করো।  
10. `Food` অ্যাবস্ট্রাক্ট ক্লাস তৈরি করো এবং সেটি থেকে `Pizza` ও `Burger` ইনহেরিট করো।  



####################################################################################################
class and object part: 
ans. 1:
class Car {
  String? brand;
  String? model;
  int? year;

  Car(String brand, String model, int year) {
    this.brand = brand;
    this.model = model;
    this.year = year;
  }
}

void main() {
  var car = Car("Rang Rover", "RXGT5", 2024);
  print(car.brand);
}

---------------------------------------------------------------------------
Ans. 2:

class Person {
  String name;
  int age;

  Person(this.name, this.age);

  printMethod() {
    print("My name is $name. My age is $age");
  }
}

void main() {
  Person userInfo = Person("Sazid", 22);
  userInfo.printMethod();
}

----------------------------------------------------------------------------
Ans. 3:
class Rectangle {
  int height;
  int width;

  Rectangle(this.height, this.width);

  void areaOfRectangle() {
    int area = height * width;
    print("Area of a Rectangle is $area");
  }
}

void main() {
  Rectangle recArea = Rectangle(12, 10);
  recArea.areaOfRectangle();
}
------------------------------------------------------------------------------
ans. 4:
class BankAccount {
  var balance = 0;

  deposit(int depositBalance) {
    balance = balance + depositBalance;
  }

  withdraw(int withdrawBalance) {
    if (withdrawBalance > balance) {
      print("Withdraw failed.Your balance is $balance.Insufficent fund.");
    } else{
      balance = balance - withdrawBalance;
    }
  }
}

void main() {
  BankAccount account = BankAccount();
  account.deposit(200);
  account.withdraw(50);
  print("Your account balance ${account.balance}");
}
------------------------------------------------------------------------------
ans. 5:
class Student {
  var name;
  var rollNumber;
  var grade;

  Student(var name, var rollNumber, var grade) {
    this.name = name;
    this.rollNumber = rollNumber;
    this.grade = grade;
  }

  void studentInfo() {
    print("Student name is $name");
    print("Student rollNumber is $rollNumber");
    print("Student grade is $grade");
  }
}

void main() {
  Student student = new Student("Sazid", 74, "A+");
  student.studentInfo();
}
------------------------------------------------------------------
Ans. 6:
class Book {
  String title;
  String author;
  int price;

  Book(this.title, this.author, this.price);

  void bookDetails() {
    print('Book title \"$title\"');
    print('Book author \"$author\"');
    print('Book price $price\$');
  }
}

void main() {
  Book book = new Book("Dart Zero to Hero", "Witson Watt", 40);
  book.bookDetails();
}

---------------------------------------------------------------------
Ans. 7:
class Product {
  dynamic id;
  String name;
  int price;

  Product(this.id, this.name, this.price);

  void productDetails() {
    print("Product id: $id");
    print("Product name: $name");
    print("Product price: \$$price X");
  }

  void discount(int discountPercentage) {
    var discountPrice = price - ((price * discountPercentage) / 100);
    print("Discount price: \$$discountPrice ✓");
  }
}

void main() {
  Product product = new Product(12345, "chocolate", 5);
  product.productDetails();
  product.discount(10);
}
------------------------------------------------------------------------------------
Ans. 8:
class Circle {
  dynamic radius;
  static const double PI = 3.14;

  Circle(this.radius);

  void circleArea() {
    var area = PI * (radius * radius);
    print("Circle area: $area");
  }

  void circleCircumference() {
    var circumference = 2 * PI * radius;
    print("Circle circumference: $circumference");
  }
}

void main() {
  Circle circle = new Circle(2.5);
  circle.circleArea();
  circle.circleCircumference();
}
----------------------------------------------------------------------------
Ans. 9:
class Employee {
  int id;
  String name;
  int salary;

  Employee(this.id, this.name, this.salary);

  void employeeInfo() {
    print("Employee id: $id");
    print("Employee name: $name");
    print("Employee salary: $salary tk");
  }

  void salaryBonus(int bonus) {
    var addBonus = salary + bonus;
    print("Salary with bonus: $addBonus tk");
  }
}

void main() {
  Employee employee = new Employee(1234, "Sazid", 25000);
  employee.employeeInfo();
  employee.salaryBonus(5000);
}
------------------------------------------------------------------------------
Ans. 10:
class Movie {
  String name;
  String director;
  int releaseYear;

  Movie(this.name, this.director, this.releaseYear);

  void movieDetails() {
    print("Movie name: $name");
    print("Director: $director");
    print("Release year: $releaseYear");
  }
}

void main() {
  Movie movie = new Movie("Lapata Ladies", "Kiran Rao", 2023);
  movie.movieDetails();
}
######################################################################################
########################################################################################
###############################################################################################
Encapsulation:
==============
ans. 1:
class Student {
  int? _rollNumber;
  String? _grade;

  void set rollNumber(int rollNumber) {
    _rollNumber = rollNumber;
  }

  int get rollNumber {
    return _rollNumber ?? 0;
  }

  void set grade(String grade) {
    _grade = grade;
  }

  String get grade {
    return _grade ?? "Execution fail";
  }

  void showDetails() {
    print("Rollnumber: $_rollNumber and Grade: $_grade");
  }
}

void main() {
  Student student = new Student();
  student.rollNumber = 74;
  student.grade = "A+";
  student.showDetails();
}
----------------------------------------------------------------------
ans. 2:

class BankAccount {
  int _balance = 0;

  void set balance(int balance) {
    _balance = balance;
  }

  int get balance {
    return _balance;
  }

  void deposit(int depositBalance) {
    balance = balance + depositBalance;
  }

  void withdraw(int withdrawBalance) {
    if (withdrawBalance > balance) {
      print("Withdraw failed.Your balance is $balance.Insufficent fund.");
    } else {
      balance = balance - withdrawBalance;
    }
  }
}

void main() {
  BankAccount account = BankAccount();
  account.deposit(200);
  account.withdraw(50);
  print("Your account balance ${account.balance}");
}
------------------------------------------------------------------------------
Ans. 3:

class Car {
  double _speed = 0;

  void set speed(double speed) {
    _speed = speed;
  }

  double get speed {
    return _speed;
  }

  void speedUp(double addSpeed) {
    speed = speed + addSpeed;
  }

  void speedDown(double slowSpeed) {
    speed = speed - slowSpeed;
  }

  void showCarSpeedInfo() {
    print("Car speed is: $speed KM/h now.");
  }
}

void main() {
  Car car = Car();
  car.speedUp(20);
  car.speedDown(5);
  car.showCarSpeedInfo();
}

------------------------------------------------------------------
Ans. 4: 
class Employee {
  int _salary = 25000;

  void set salary(int salary) {
    _salary = _salary + salary;
  }

  int get salary {
    return _salary;
  }

  void showSalaryInfo() {
    print("Your salary: $salary taka.");
  }
}

void main() {
  Employee employee = new Employee();
  employee.salary = 2000;
  employee.showSalaryInfo();
}
------------------------------------------------------------------------
Ans. 5: 
class Laptop {
  int _price = 800;

  void set discount(int discount) {
    _price = _price - discount;
  }

  int get price {
    return _price;
  }

  void showLaptopPrice() {
    print("Laptop Price: \$$_price");
  }
}

void main() {
  Laptop laptop = Laptop();
  laptop.discount = 20;
  laptop.showLaptopPrice();
}
------------------------------------------------------------------
Ans. 6:
import 'dart:io';

class Account {
  double balance = 0.0;
  String _pin = "2580abc";

  void set pin(String pin) {
    _pin = pin;
  }

  String get pin {
    return _pin;
  }

  void displayAccountInfo() {
    print("Your Account Balance: \$$balance");
  }

  void menu() {
    print("What do you want to do ?");
    print("1. Deposit \n2. Withdraw \n3. Show pin \n4. Change pin \n5. Log out");
    print("Enter 1, 2, 3 or 4 -> ");
    funtionchoice();
  }

  void inputAndChekPassword() {
    print("please enter your pin first to go next step -> ");
    String? inputPin;
    do {
      String? inputPin = stdin.readLineSync();
      if (_pin == inputPin) {
        print("Welcome! \nWhat do you want to do ?");
        print(
            "1. Deposit \n2. Withdraw \n3. Show pin \n4. Change pin \n5. Log out");
        print("Enter 1, 2, 3, 4 or 5 -> ");
        funtionchoice();
        break;
      } else {
        print("Incorrect Pin. Please try again! -> ");
      }
    } while (_pin != inputPin);
  }

  void funtionchoice() {
    String? choiceNumber = stdin.readLineSync();
    int intChoiceNumber = int.parse(choiceNumber!);

    switch (intChoiceNumber) {
      case 1:
        deposit();
        break;
      case 2:
        withdraw();
        break;
      case 5:
        print("Logout Successful...");
        break;
      default:
        print("Enter your choice within 1,2,3 or 4");
    }
  }

  void deposit() {
    print("Enter deposit amount ->");
    String? inputDepositAmount = stdin.readLineSync();
    double depositAmount = double.parse(inputDepositAmount!);

    balance = balance + depositAmount;
    displayAccountInfo();
    menu();
  }

  void withdraw() {
    print("Enter withdraw amount ->");
    String? inputWithdrawAmount = stdin.readLineSync();
    double withdrawAmount = double.parse(inputWithdrawAmount!);

    balance = balance - withdrawAmount;
    displayAccountInfo();
    menu();
  }
}

void main() {
  Account account = Account();
  account.pin = "sazid123";
  account.displayAccountInfo();
  account.inputAndChekPassword();
}
-----------------------------------------------------------------------------------
Ans. 7:
class Book {
  double _price = 0.0;

  void set price(double price) {
    _price = price;
  }

  double get price {
    return _price;
  }
}

void main() {
  Book book = Book();
  book.price = 20;
  print(book.price);
}
-----------------------------------------------------------------------------------
Ans. 8:
class Mobile {
  int _batteryLevel = 0;

  void set batteryLevel(int batteryLevel) {
    _batteryLevel = batteryLevel;
  }

  int get batteryLevel {
    return _batteryLevel;
  }
}

void main() {
  Mobile mobile = Mobile();
  mobile.batteryLevel = 80;
  print(mobile.batteryLevel);
}
--------------------------------------------------------------------------------


