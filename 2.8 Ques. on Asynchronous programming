এখানে ১০টি ডার্ট অ্যাসিঙ্ক্রোনাস প্রোগ্রামিংয়ের প্র্যাকটিস সমস্যা দেওয়া হল:

1. **অ্যাসিঙ্ক্রোনাস ফাংশন লিখুন**:
   একটি অ্যাসিঙ্ক্রোনাস ফাংশন লিখুন যা ৩ সেকেন্ড সময় নিবে এবং তারপর "Hello, World!" প্রিন্ট করবে।

2. **ফিউচার থেকে মান রিটার্ন করা**:
   একটি ফাংশন লিখুন যা ৫ সেকেন্ড পর একটি ফিউচার রিটার্ন করবে এবং সেই ফিউচারের মান হিসেবে "Done" প্রিন্ট করবে।

3. **এওয়েট ব্যবহার করা**:
   একটি অ্যাসিঙ্ক্রোনাস ফাংশন তৈরি করুন যা একাধিক ফিউচার কাজ করবে এবং প্রতিটি ফিউচার শেষে তার মান প্রিন্ট করবে।

4. **অ্যাসিঙ্ক্রোনাস এবং ওয়েট কম্বিনেশন**:
   একটি অ্যাসিঙ্ক্রোনাস ফাংশন তৈরি করুন যেটি ১, ২, এবং ৩ সেকেন্ড করে ওয়েট করবে এবং তারপর তাদের যোগফল প্রিন্ট করবে।

5. **ফিউচার এবং অ্যাসিঙ্ক্রোনাস কল করা**:
   দুটি ফিউচার কল করুন, একটির জন্য ২ সেকেন্ড এবং আরেকটির জন্য ৪ সেকেন্ড সময় লাগবে। আপনি একসাথে দুইটি ফিউচার অ্যাসিঙ্ক্রোনাসভাবে রান করবেন এবং শেষে তাদের যোগফল প্রিন্ট করবেন।

6. **অ্যাসিঙ্ক্রোনাস এবং ত্রুটি হ্যান্ডলিং**:
   একটি অ্যাসিঙ্ক্রোনাস ফাংশন তৈরি করুন, যেটি কোনো এক জায়গায় ত্রুটি ছুঁড়ে দিবে, এবং আপনি try-catch ব্লক দিয়ে সেই ত্রুটিকে হ্যান্ডেল করবেন।

7. **ফিউচার ওয়েট করার জন্য সিম্পল কোড**:
   একটি অ্যাসিঙ্ক্রোনাস ফাংশন তৈরি করুন যা ১ সেকেন্ড পর একটি ফিউচার রিটার্ন করবে এবং পরে সেই ফিউচার থেকে প্রাপ্ত মান প্রিন্ট করবে।

8. **কম্বাইনিং ফিউচার**:
   দুটি অ্যাসিঙ্ক্রোনাস কল কম্বাইন করুন এবং তাদের একত্রে রিটার্ন করে দেখান।

9. **স্ট্রীম ব্যবহার করা**:
   একটি স্ট্রীম তৈরি করুন যা প্রতি ৩ সেকেন্ডে একটি সংখ্যা প্রিন্ট করবে। সেটিকে অ্যাসিঙ্ক্রোনাসভাবে সাবস্ক্রাইব করুন।

10. **অ্যাসিঙ্ক্রোনাস প্রক্রিয়া থেকে মান পাওয়া**:
   একটি অ্যাসিঙ্ক্রোনাস ফাংশন তৈরি করুন যা একটি লম্বা প্রসেসিংয়ের পরে মান রিটার্ন করবে, এবং সেই মানটি ফিউচারের মাধ্যমে রিটার্ন করার পর প্রিন্ট হবে।

এসব সমস্যার মাধ্যমে আপনি ডার্টের অ্যাসিঙ্ক্রোনাস প্রোগ্রামিং ভালোভাবে শিখতে পারবেন।

##########################################################################################################################################

ans. 1:
void main() async{
  await Future.delayed(Duration(seconds: 3));
  print("Hello World");
}

-----------------------------------------------------------------------
Ans. no. 2: 
Future<String> work() async {
  await Future.delayed(Duration(seconds: 5));
  return "Done";
}

void main() async{
  String result = await work();
  print(result);
}
-----------------------------------------------------------------------
Ans. 3:
Future work() async {
  await Future.delayed(Duration(seconds: 2));
  print("Done 1");
  await Future.delayed(Duration(seconds: 2));
  print("Done 2");
  await Future.delayed(Duration(seconds: 2));
  print("Done 3");
  await Future.delayed(Duration(seconds: 2));
  print("Done 4");
}

void main() async {
  work();
}
-----------------------------------------------------------------------

Ans. 
